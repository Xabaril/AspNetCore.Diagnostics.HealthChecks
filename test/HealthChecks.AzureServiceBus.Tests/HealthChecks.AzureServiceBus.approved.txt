namespace HealthChecks.AzureServiceBus
{
    public abstract class AzureServiceBusHealthCheck<TOptions>
        where TOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusHealthCheckOptions
    {
        protected AzureServiceBusHealthCheck(TOptions options, HealthChecks.AzureServiceBus.ServiceBusClientProvider clientProvider) { }
        protected virtual string ConnectionKey { get; }
        protected TOptions Options { get; }
        [System.Obsolete("Please, override ConnectionKey property instead.")]
        protected string Prefix { get; }
        protected Azure.Messaging.ServiceBus.ServiceBusClient CreateClient() { }
        protected Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient CreateManagementClient() { }
    }
    public class AzureServiceBusQueueHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions>, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusQueueHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions options) { }
        public AzureServiceBusQueueHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions options, HealthChecks.AzureServiceBus.ServiceBusClientProvider clientProvider) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class AzureServiceBusQueueMessageCountThresholdHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions>, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusQueueMessageCountThresholdHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions options) { }
        public AzureServiceBusQueueMessageCountThresholdHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions options, HealthChecks.AzureServiceBus.ServiceBusClientProvider clientProvider) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class AzureServiceBusSubscriptionHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions>, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusSubscriptionHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions options) { }
        public AzureServiceBusSubscriptionHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions options, HealthChecks.AzureServiceBus.ServiceBusClientProvider clientProvider) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class AzureServiceBusTopicHealthCheck : HealthChecks.AzureServiceBus.AzureServiceBusHealthCheck<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions>, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public AzureServiceBusTopicHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions options) { }
        public AzureServiceBusTopicHealthCheck(HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions options, HealthChecks.AzureServiceBus.ServiceBusClientProvider clientProvider) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class ServiceBusClientProvider
    {
        public ServiceBusClientProvider() { }
        public virtual Azure.Messaging.ServiceBus.ServiceBusClient CreateClient(string? connectionString) { }
        public virtual Azure.Messaging.ServiceBus.ServiceBusClient CreateClient(string? fullyQualifiedName, Azure.Core.TokenCredential credential) { }
        public virtual Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient CreateManagementClient(string? connectionString) { }
        public virtual Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient CreateManagementClient(string? fullyQualifiedName, Azure.Core.TokenCredential credential) { }
    }
}
namespace HealthChecks.AzureServiceBus.Configuration
{
    public abstract class AzureServiceBusHealthCheckOptions
    {
        protected AzureServiceBusHealthCheckOptions() { }
        public string? ConnectionString { get; set; }
        public Azure.Core.TokenCredential? Credential { get; set; }
        public string? FullyQualifiedNamespace { get; set; }
    }
    public class AzureServiceBusQueueHealthCheckOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusHealthCheckOptions
    {
        public AzureServiceBusQueueHealthCheckOptions(string queueName) { }
        public string QueueName { get; set; }
        public bool UsePeekMode { get; set; }
    }
    public struct AzureServiceBusQueueMessagesCountThreshold
    {
        public AzureServiceBusQueueMessagesCountThreshold() { }
        public int DegradedThreshold { get; set; }
        public int UnhealthyThreshold { get; set; }
    }
    public class AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions
    {
        public AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions(string queueName) { }
        public HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThreshold? ActiveMessages { get; set; }
        public HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThreshold? DeadLetterMessages { get; set; }
    }
    public class AzureServiceBusSubscriptionHealthCheckHealthCheckOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions
    {
        public AzureServiceBusSubscriptionHealthCheckHealthCheckOptions(string topicName, string subscriptionName) { }
        public string SubscriptionName { get; set; }
        public bool UsePeekMode { get; set; }
    }
    public class AzureServiceBusTopicHealthCheckOptions : HealthChecks.AzureServiceBus.Configuration.AzureServiceBusHealthCheckOptions
    {
        public AzureServiceBusTopicHealthCheckOptions(string topicName) { }
        public string TopicName { get; set; }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class AzureServiceBusHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> queueNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string queueName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> fullyQualifiedNamespaceFactory, System.Func<System.IServiceProvider, string> queueNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueue(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string queueName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueueMessageCountThreshold(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string queueName, string? name = null, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions>? configure = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueueMessageCountThreshold(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string queueName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusQueueMessagesCountThresholdHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueueMessageCountThresholdWithNamespace(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string endpoint, string queueName, string? name = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusQueueWithNamespace(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string queueName, string? name = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, string> subscriptionNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string topicName, string subscriptionName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> fullyQualifiedNamespaceFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, string> subscriptionNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscription(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string topicName, string subscriptionName, Azure.Core.TokenCredential tokenCredential, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusSubscriptionHealthCheckHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusSubscriptionWithNamespace(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string topicName, string subscriptionName, string? name = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> connectionStringFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string connectionString, string topicName, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string topicName, Azure.Core.TokenCredential tokenCredential, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopic(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> fullyQualifiedNamespaceFactory, System.Func<System.IServiceProvider, string> topicNameFactory, System.Func<System.IServiceProvider, Azure.Core.TokenCredential> tokenCredentialFactory, System.Action<HealthChecks.AzureServiceBus.Configuration.AzureServiceBusTopicHealthCheckOptions>? configure = null, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAzureServiceBusTopicWithNamespace(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string fullyQualifiedNamespace, string topicName, string? name = null) { }
    }
}