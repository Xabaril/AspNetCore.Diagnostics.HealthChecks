namespace HealthChecks.Kafka
{
    public class KafkaHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.IDisposable
    {
        public KafkaHealthCheck(HealthChecks.Kafka.KafkaHealthCheckOptions options) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual void Dispose() { }
    }
    public class KafkaHealthCheckOptions
    {
        public KafkaHealthCheckOptions() { }
        public Confluent.Kafka.ProducerConfig Configuration { get; set; }
        public System.Action<Confluent.Kafka.ProducerBuilder<string, string>>? Configure { get; set; }
        public System.Func<HealthChecks.Kafka.KafkaHealthCheckOptions, Confluent.Kafka.Message<string, string>> MessageBuilder { get; set; }
        public string Topic { get; set; }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class KafkaHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddKafka(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, HealthChecks.Kafka.KafkaHealthCheckOptions options, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddKafka(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, HealthChecks.Kafka.KafkaHealthCheckOptions> optionFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddKafka(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, Confluent.Kafka.ProducerConfig config, string topic = "healthchecks-topic", string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddKafka(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Action<Confluent.Kafka.ProducerConfig> setup, string topic = "healthchecks-topic", string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}