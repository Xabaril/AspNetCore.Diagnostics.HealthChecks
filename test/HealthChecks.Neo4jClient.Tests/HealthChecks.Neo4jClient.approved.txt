namespace HealthChecks.Neo4jClient
{
    public class Neo4jClientHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public Neo4jClientHealthCheck(HealthChecks.Neo4jClient.Neo4jClientHealthCheckOptions options) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class Neo4jClientHealthCheckOptions
    {
        public Neo4jClientHealthCheckOptions(Neo4jClient.IBoltGraphClient graphClient) { }
        public Neo4jClientHealthCheckOptions(string? host, string? username, string? password, string? realm) { }
        public Neo4j.Driver.EncryptionLevel? EncryptionLevel { get; set; }
        public Neo4jClient.IBoltGraphClient? GraphClient { get; set; }
        public string? Host { get; set; }
        public string? Password { get; set; }
        public string? Realm { get; set; }
        public bool SerializeNullValues { get; set; }
        public bool UseDriverDataTypes { get; set; }
        public string? Username { get; set; }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class Neo4jClientHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddNeo4jClient(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, HealthChecks.Neo4jClient.Neo4jClientHealthCheckOptions healthCheckOptions, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddNeo4jClient(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, Neo4jClient.IBoltGraphClient> graphClientFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}